{{- if eq .chezmoi.os "windows" -}}

# Self-elevate the script if required
if (-Not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] 'Administrator')) {
  if ([int](Get-CimInstance -Class Win32_OperatingSystem | Select-Object -ExpandProperty BuildNumber) -ge 6000) {
    $CommandLine = "-NoExit -File `"" + $MyInvocation.MyCommand.Path + "`" " + $MyInvocation.UnboundArguments
    Start-Process -Wait -FilePath PowerShell.exe -Verb Runas -ArgumentList $CommandLine
    Exit
  }
}

$hereString = @"
# yaml-language-server: $schema=https://aka.ms/configuration-dsc-schema/0.2

properties:
  resources:
    - resource: Microsoft.Windows.Developer/DeveloperMode
      id: Enable
      directives:
        description: Enable Developer Mode
        allowPrerelease: true
      settings:
        Ensure: Present
    - resource: Microsoft.Windows.Developer/WindowsExplorer
      directives:
        description: Windows Explorer settings
        allowPrerelease: true
      settings:
        FileExtensions: Show # [KeepCurrentValue, Hide]
        HiddenFiles: Show # [KeepCurrentValue, Hide]
        ItemCheckBoxes: Show # [KeepCurrentValue, Hide]
        RestartExplorer: # Use caution when setting `RestartExplorer: true` as this will force explorer to close. Required for all WindowsExplorer settings.
    - resource: Microsoft.Windows.Developer/EnableDarkMode
      directives:
        description: Enable dark mode
        allowPrerelease: true
      settings:
        Ensure: Present
        # Use caution when setting `RestartExplorer: true` as this will force explorer to close.
        RestartExplorer: true # Required to apply changes
    - resource: Microsoft.Windows.Developer/Taskbar
      directives:
        description: Set Alignment to middle
        allowPrerelease: true
      settings:
        Alignment: Middle
    - resource: Microsoft.Windows.Developer/Taskbar
      directives:
        description: Disable Widgetsbutton
        allowPrerelease: true
      settings:
        WidgetsButton: Hide

    # Install generic packages
    {{ range .packages.windows.generic -}}
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: {{ .id | quote }}
      directives:
        description:  {{ .description | quote }}
        allowPrerelease: {{ .allowPrerelease | quote }}
      settings:
        id: {{ .store_id | quote }}
        source: {{ .source | quote }}
    {{ end }}

    {{ if eq .is_personal_device_used_work true -}}
    # Install extended company packages (non company-provided device which is missing preinstalled company software) on your private device used for work
    {{ range .packages.windows.company_extended -}}
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: {{ .id | quote }}
      directives:
        description:  {{ .description | quote }}
        allowPrerelease: {{ .allowPrerelease | quote }}
      settings:
        id: {{ .store_id | quote }}
        source: {{ .source | quote }}
    {{ end }}
    {{ end }}

    {{ if (or (eq .is_personal_device true) (eq .is_personal_device_used_work true)) -}}
    # Install private packages
    {{ range .packages.windows.private -}}
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: {{ .id | quote }}
      directives:
        description:  {{ .description | quote }}
        allowPrerelease: {{ .allowPrerelease | quote }}
      settings:
        id: {{ .store_id | quote }}
        source: {{ .source | quote }}
    {{ end }}
    {{ end }}

  configurationVersion: 0.2.0
"@

{{ if (or (eq .is_personal_device_used_work true) (eq .is_company_device true)) -}}
# Install RSAT Tools from online source if work device
Add-WindowsCapability -Online -Name "Rsat.CertificateServices.Tools~~~~0.0.1.0"
Add-WindowsCapability -Online -Name "Rsat.Dns.Tools~~~~0.0.1.0"
Add-WindowsCapability -Online -Name "Rsat.GroupPolicy.Management.Tools~~~~0.0.1.0"
Add-WindowsCapability -Online -Name "Rsat.ServerManager.Tools~~~~0.0.1.0"
Add-WindowsCapability -Online -Name "Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0"
{{ end }}

# Function to create a temporary file
function New-TemporaryFile {
    $tempFile = [System.IO.Path]::GetTempFileName()
    return $tempFile
}

# Create a temporary file
$tempFile = New-TemporaryFile

# Write the content to the temporary file
$hereString | Out-File -FilePath $tempFile -Encoding utf8

# Run winget configure with the temporary file
winget configure -f $tempFile --accept-configuration-agreements

# Clean up the temporary file
Remove-Item $tempFile

# Update the path after package installation, since we want to use the new binaries
$env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")


{{ end -}}
